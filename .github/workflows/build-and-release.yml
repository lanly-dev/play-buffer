name: Build and Release PortAudio

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should_build }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new PortAudio release
        id: check
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl git
          LATEST_COMMIT=$(git ls-remote https://github.com/PortAudio/portaudio.git HEAD | awk '{print $1}')
          SHORT_COMMIT=${LATEST_COMMIT: -6}
          DATE_TAG=$(date +"%Y%m")
          BUILD_NUM=1
          while true; do
            CUSTOM_TAG="$DATE_TAG.$SHORT_COMMIT.$BUILD_NUM"
            TAG_EXISTS=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$CUSTOM_TAG -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" | jq -r .tag_name)
            if [ "$TAG_EXISTS" = "$CUSTOM_TAG" ]; then
              BUILD_NUM=$((BUILD_NUM + 1))
            else
              break
            fi
          done
          echo "Custom tag: $CUSTOM_TAG"
          if [ -f last_built.txt ]; then
            if [ "$CUSTOM_TAG" = "$(cat last_built.txt)" ]; then
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
          echo "version=$CUSTOM_TAG" >> $GITHUB_OUTPUT

  build:
    needs: check-and-build
    if: needs.check-and-build.outputs.should-build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout builder
        uses: actions/checkout@v4
        with:
          path: builder
      - name: Checkout PortAudio (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Checking out latest PortAudio commit from default branch"
          git clone --depth 1 --branch master https://github.com/PortAudio/portaudio.git
          cd portaudio
          echo "PortAudio repository contents:"
          ls -la
      - name: Checkout PortAudio (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "Checking out latest PortAudio commit from default branch"
          git clone --depth 1 --branch master https://github.com/PortAudio/portaudio.git
          Set-Location portaudio
          Write-Host "PortAudio repository contents:"
          Get-ChildItem
        shell: pwsh
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # CMake is pre-installed on Windows runners
      - name: Build PortAudio (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Building PortAudio on ${{ matrix.os }}"
          set -x
          bash scripts/build-${{ matrix.os == 'ubuntu-latest' && 'ubuntu' || 'macos' }}.sh || { echo 'Build failed!'; [ -f portaudio/build/CMakeFiles/CMakeError.log ] && cat portaudio/build/CMakeFiles/CMakeError.log; exit 1; }
          set +x
          echo "Build completed. Contents of build directory:"
          ls -la portaudio/build/
      - name: Build PortAudio (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "Building PortAudio on Windows"
          scripts\build-windows.ps1
          Write-Host "Build completed. Contents of build directory:"
          Get-ChildItem portaudio
        shell: pwsh
      - name: Package artifacts (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd portaudio
          mkdir -p artifacts/include
          cp -r include/* artifacts/include/ 2>/dev/null || true
          find . -name "*.lib" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.dll" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.a" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.so*" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.dylib*" -exec cp {} artifacts/ \; 2>/dev/null || true
          echo "Packaged files:"
          ls -la artifacts/
      - name: Package artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-Location portaudio
          New-Item -ItemType Directory -Force -Path artifacts/include | Out-Null
          Copy-Item -Recurse -Force include/* artifacts/include/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.lib" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.dll" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.a" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.so*" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.dylib*" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Write-Host "Packaged files:"
          Get-ChildItem artifacts/
        shell: pwsh
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portaudio-${{ matrix.os }}-${{ needs.check-and-build.outputs.version }}-${{ github.job }}-${{ github.run_id }}
          path: portaudio/artifacts/

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # CMake is pre-installed on Windows runners

      - name: Build PortAudio (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd portaudio
          echo "Building PortAudio on ${{ matrix.os }}"
          set -x
          bash ../builder/scripts/build-${{ matrix.os == 'ubuntu-latest' && 'ubuntu' || 'macos' }}.sh || { echo 'Build failed!'; [ -f build/CMakeFiles/CMakeError.log ] && cat build/CMakeFiles/CMakeError.log; exit 1; }
          set +x
          echo "Build completed. Contents of build directory:"
          ls -la build/

      - name: Build PortAudio (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-Location portaudio
          Write-Host "Building PortAudio on Windows"
          ../builder/scripts/build-windows.ps1
          Write-Host "Build completed. Contents of build directory:"
          Get-ChildItem .
        shell: pwsh

      - name: Package artifacts (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd portaudio
          mkdir -p artifacts/include
          cp -r include/* artifacts/include/ 2>/dev/null || true

          # Find and copy built libraries
          find . -name "*.lib" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.dll" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.a" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.so*" -exec cp {} artifacts/ \; 2>/dev/null || true
          find . -name "*.dylib*" -exec cp {} artifacts/ \; 2>/dev/null || true

          # List what we packaged
          echo "Packaged files:"
          ls -la artifacts/

      - name: Package artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-Location portaudio
          New-Item -ItemType Directory -Force -Path artifacts/include | Out-Null
          Copy-Item -Recurse -Force include/* artifacts/include/ -ErrorAction SilentlyContinue

          # Find and copy built libraries
          Get-ChildItem -Recurse -Filter "*.lib" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.dll" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.a" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.so*" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter "*.dylib*" | Copy-Item -Destination artifacts/ -ErrorAction SilentlyContinue

          # List what we packaged
          Write-Host "Packaged files:"
          Get-ChildItem artifacts/
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portaudio-${{ matrix.os }}-${{ needs.check-and-build.outputs.version }}
          path: portaudio/artifacts/

  release:
    needs: [check-and-build, build]
    if: needs.check-and-build.outputs.should-build == 'true' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List packaged artifacts
        run: |
          echo "Artifacts directory contents before release:"
          if [ -d artifacts/ ]; then
            ls -l artifacts/
          else
            echo "No artifacts directory found."
          fi

      - name: Create release
        run: |
          if ls artifacts/*/* 1> /dev/null 2>&1; then
            gh release create ${{ needs.check-and-build.outputs.version }} \
              --title "PortAudio ${{ needs.check-and-build.outputs.version }}" \
              --notes "Automated build of PortAudio ${{ needs.check-and-build.outputs.version }}"
          else
            echo "No artifacts found to upload. Skipping release."
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        run: |
          for file in artifacts/*/*; do
            if [ -f "$file" ]; then
              parent=$(basename $(dirname "$file"))
              base=$(basename "$file")
              newname="${parent}-${base}"
              cp "$file" "/tmp/$newname"
              gh release upload ${{ needs.check-and-build.outputs.version }} "/tmp/$newname"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update last built
        run: |
          echo ${{ needs.check-and-build.outputs.version }} > last_built.txt
          git add last_built.txt
          git commit -m "Update last built to ${{ needs.check-and-build.outputs.version }}"
          git push